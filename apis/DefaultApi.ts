// tslint:disable
/**
 * Sensibo API
 * <h1>Introduction</h1> The Sensibo API is built on HTTP. Our API is RESTful. It accepts and returns JSON in the HTTP body. You can use your favorite HTTP/REST library for your programming language to use the API, or you can use one of our SDKs (currently available in [Python](https://github.com/Sensibo/sensibo-python-sdk)). The yaml specification file can be uploaded to swagger. [try it live now](https://editor.swagger.io/?url=https://raw.githubusercontent.com/Sensibo/sensibo.github.io/master/sensibo.openapi.yaml).<h1>Contact</h1>The best way to get help and involved is to join the official [Sensibo Facebook group](https://facebook.com/groups/sensibo)<br>Also, you can find more resources and help on the [support site](http://support.sensibo.com)<h1>Authentication</h1> When you sign up for an account, you can generate API keys [here](https://home.sensibo.com/me/api), and delete API keys (as you may need to rotate your keys in the future). You authenticate to the Sensibo API by providing your api key in the request query parameters as ?apiKey={your_api_key}. <h1>GET requests</h1> Most GET requests can be provided with \'fields\' parameter in the query string to specify which fields you\'d like to retrieve. If you want to retrieve all fields or see the options specify fields=\\*<h1>Common Examples</h1><h3>Get all devices info</h3> `curl -X GET https://home.sensibo.com/api/v2/users/me/pods?fields=*&apiKey={api_key}`<h3>Turn on the AC</h3>`curl -X POST https://home.sensibo.com/api/v2/pods/{device_id}/acStates?apiKey={api_key} -d \"{\\\"acState\\\":{\\\"on\\\":true}}\"` <h3>Turn off the AC</h3>`curl -X POST https://home.sensibo.com/api/v2/pods/{device_id}/acStates?apiKey={api_key} -d \"{\\\"acState\\\":{\\\"on\\\":false}}\"`<h3>Get historical measurements up to 7 days</h3>`curl https://home.sensibo.com/api/v2/pods/{device_id}/historicalMeasurements?apiKey={api_key}&days=1`
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AcStateObject,
    AcStateObjectFromJSON,
    AcStateObjectToJSON,
    NewValueObject,
    NewValueObjectFromJSON,
    NewValueObjectToJSON,
    ScheduleObject,
    ScheduleObjectFromJSON,
    ScheduleObjectToJSON,
    TimerObject,
    TimerObjectFromJSON,
    TimerObjectToJSON,
    UNKNOWN_BASE_TYPE,
    UNKNOWN_BASE_TYPEFromJSON,
    UNKNOWN_BASE_TYPEToJSON,
} from '../models';

export interface PodsDeviceIdAcStatesGetRequest {
    deviceId: string;
    limit?: string;
}

export interface PodsDeviceIdAcStatesPostRequest {
    deviceId: string;
    acStateObject?: AcStateObject;
}

export interface PodsDeviceIdAcStatesPropertyPatchRequest {
    deviceId: string;
    property: string;
    newValueObject?: NewValueObject;
}

export interface PodsDeviceIdGetRequest {
    deviceId: string;
    fields?: string;
}

export interface PodsDeviceIdHistoricalMeasurementsGetRequest {
    deviceId: string;
    days?: number;
}

export interface PodsDeviceIdSchedulesGetRequest {
    deviceId: string;
}

export interface PodsDeviceIdSchedulesPostRequest {
    deviceId: string;
    scheduleObject?: ScheduleObject;
}

export interface PodsDeviceIdSchedulesScheduleIdDeleteRequest {
    deviceId: string;
    scheduleId: string;
}

export interface PodsDeviceIdSchedulesScheduleIdGetRequest {
    deviceId: string;
    scheduleId: string;
}

export interface PodsDeviceIdSchedulesScheduleIdPutRequest {
    deviceId: string;
    scheduleId: string;
    UNKNOWN_BASE_TYPE?: UNKNOWN_BASE_TYPE;
}

export interface PodsDeviceIdSmartmodeGetRequest {
    deviceId: string;
}

export interface PodsDeviceIdSmartmodePutRequest {
    deviceId: string;
    UNKNOWN_BASE_TYPE?: UNKNOWN_BASE_TYPE;
}

export interface PodsDeviceIdTimerDeleteRequest {
    deviceId: string;
}

export interface PodsDeviceIdTimerGetRequest {
    deviceId: string;
}

export interface PodsDeviceIdTimerPutRequest {
    deviceId: string;
    timerObject?: TimerObject;
}

export interface UsersMePodsGetRequest {
    fields?: string;
}

/**
 * no description
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get current and previous AC states
     */
    async podsDeviceIdAcStatesGetRaw(requestParameters: PodsDeviceIdAcStatesGetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling podsDeviceIdAcStatesGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // api_key authentication
        }

        const response = await this.request({
            path: `/pods/{device_id}/acStates`.replace(`{${"device_id"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get current and previous AC states
     */
    async podsDeviceIdAcStatesGet(requestParameters: PodsDeviceIdAcStatesGetRequest): Promise<void> {
        await this.podsDeviceIdAcStatesGetRaw(requestParameters);
    }

    /**
     * Set the AC state
     */
    async podsDeviceIdAcStatesPostRaw(requestParameters: PodsDeviceIdAcStatesPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling podsDeviceIdAcStatesPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // api_key authentication
        }

        const response = await this.request({
            path: `/pods/{device_id}/acStates`.replace(`{${"device_id"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AcStateObjectToJSON(requestParameters.acStateObject),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set the AC state
     */
    async podsDeviceIdAcStatesPost(requestParameters: PodsDeviceIdAcStatesPostRequest): Promise<void> {
        await this.podsDeviceIdAcStatesPostRaw(requestParameters);
    }

    /**
     * Change only one property of the AC state
     */
    async podsDeviceIdAcStatesPropertyPatchRaw(requestParameters: PodsDeviceIdAcStatesPropertyPatchRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling podsDeviceIdAcStatesPropertyPatch.');
        }

        if (requestParameters.property === null || requestParameters.property === undefined) {
            throw new runtime.RequiredError('property','Required parameter requestParameters.property was null or undefined when calling podsDeviceIdAcStatesPropertyPatch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // api_key authentication
        }

        const response = await this.request({
            path: `/pods/{device_id}/acStates/{property}`.replace(`{${"device_id"}}`, encodeURIComponent(String(requestParameters.deviceId))).replace(`{${"property"}}`, encodeURIComponent(String(requestParameters.property))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: NewValueObjectToJSON(requestParameters.newValueObject),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Change only one property of the AC state
     */
    async podsDeviceIdAcStatesPropertyPatch(requestParameters: PodsDeviceIdAcStatesPropertyPatchRequest): Promise<void> {
        await this.podsDeviceIdAcStatesPropertyPatchRaw(requestParameters);
    }

    /**
     * Get specific device info
     */
    async podsDeviceIdGetRaw(requestParameters: PodsDeviceIdGetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling podsDeviceIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.fields !== undefined) {
            queryParameters['fields'] = requestParameters.fields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // api_key authentication
        }

        const response = await this.request({
            path: `/pods/{device_id}`.replace(`{${"device_id"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get specific device info
     */
    async podsDeviceIdGet(requestParameters: PodsDeviceIdGetRequest): Promise<void> {
        await this.podsDeviceIdGetRaw(requestParameters);
    }

    /**
     * Get historical measurements
     */
    async podsDeviceIdHistoricalMeasurementsGetRaw(requestParameters: PodsDeviceIdHistoricalMeasurementsGetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling podsDeviceIdHistoricalMeasurementsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.days !== undefined) {
            queryParameters['days'] = requestParameters.days;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // api_key authentication
        }

        const response = await this.request({
            path: `/pods/{device_id}/historicalMeasurements`.replace(`{${"device_id"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get historical measurements
     */
    async podsDeviceIdHistoricalMeasurementsGet(requestParameters: PodsDeviceIdHistoricalMeasurementsGetRequest): Promise<void> {
        await this.podsDeviceIdHistoricalMeasurementsGetRaw(requestParameters);
    }

    /**
     * Get the scheduled items
     */
    async podsDeviceIdSchedulesGetRaw(requestParameters: PodsDeviceIdSchedulesGetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling podsDeviceIdSchedulesGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // api_key authentication
        }

        const response = await this.request({
            path: `/pods/{device_id}/schedules/`.replace(`{${"device_id"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get the scheduled items
     */
    async podsDeviceIdSchedulesGet(requestParameters: PodsDeviceIdSchedulesGetRequest): Promise<void> {
        await this.podsDeviceIdSchedulesGetRaw(requestParameters);
    }

    /**
     * create a new schedule
     */
    async podsDeviceIdSchedulesPostRaw(requestParameters: PodsDeviceIdSchedulesPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling podsDeviceIdSchedulesPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // api_key authentication
        }

        const response = await this.request({
            path: `/pods/{device_id}/schedules/`.replace(`{${"device_id"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScheduleObjectToJSON(requestParameters.scheduleObject),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * create a new schedule
     */
    async podsDeviceIdSchedulesPost(requestParameters: PodsDeviceIdSchedulesPostRequest): Promise<void> {
        await this.podsDeviceIdSchedulesPostRaw(requestParameters);
    }

    /**
     * Delete a specific schedule
     */
    async podsDeviceIdSchedulesScheduleIdDeleteRaw(requestParameters: PodsDeviceIdSchedulesScheduleIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling podsDeviceIdSchedulesScheduleIdDelete.');
        }

        if (requestParameters.scheduleId === null || requestParameters.scheduleId === undefined) {
            throw new runtime.RequiredError('scheduleId','Required parameter requestParameters.scheduleId was null or undefined when calling podsDeviceIdSchedulesScheduleIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // api_key authentication
        }

        const response = await this.request({
            path: `/pods/{device_id}/schedules/{schedule_id}/`.replace(`{${"device_id"}}`, encodeURIComponent(String(requestParameters.deviceId))).replace(`{${"schedule_id"}}`, encodeURIComponent(String(requestParameters.scheduleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific schedule
     */
    async podsDeviceIdSchedulesScheduleIdDelete(requestParameters: PodsDeviceIdSchedulesScheduleIdDeleteRequest): Promise<void> {
        await this.podsDeviceIdSchedulesScheduleIdDeleteRaw(requestParameters);
    }

    /**
     * Get a specific schedule
     */
    async podsDeviceIdSchedulesScheduleIdGetRaw(requestParameters: PodsDeviceIdSchedulesScheduleIdGetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling podsDeviceIdSchedulesScheduleIdGet.');
        }

        if (requestParameters.scheduleId === null || requestParameters.scheduleId === undefined) {
            throw new runtime.RequiredError('scheduleId','Required parameter requestParameters.scheduleId was null or undefined when calling podsDeviceIdSchedulesScheduleIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // api_key authentication
        }

        const response = await this.request({
            path: `/pods/{device_id}/schedules/{schedule_id}/`.replace(`{${"device_id"}}`, encodeURIComponent(String(requestParameters.deviceId))).replace(`{${"schedule_id"}}`, encodeURIComponent(String(requestParameters.scheduleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get a specific schedule
     */
    async podsDeviceIdSchedulesScheduleIdGet(requestParameters: PodsDeviceIdSchedulesScheduleIdGetRequest): Promise<void> {
        await this.podsDeviceIdSchedulesScheduleIdGetRaw(requestParameters);
    }

    /**
     * Enable or disable a specific schedule
     */
    async podsDeviceIdSchedulesScheduleIdPutRaw(requestParameters: PodsDeviceIdSchedulesScheduleIdPutRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling podsDeviceIdSchedulesScheduleIdPut.');
        }

        if (requestParameters.scheduleId === null || requestParameters.scheduleId === undefined) {
            throw new runtime.RequiredError('scheduleId','Required parameter requestParameters.scheduleId was null or undefined when calling podsDeviceIdSchedulesScheduleIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // api_key authentication
        }

        const response = await this.request({
            path: `/pods/{device_id}/schedules/{schedule_id}/`.replace(`{${"device_id"}}`, encodeURIComponent(String(requestParameters.deviceId))).replace(`{${"schedule_id"}}`, encodeURIComponent(String(requestParameters.scheduleId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UNKNOWN_BASE_TYPEToJSON(requestParameters.UNKNOWN_BASE_TYPE),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Enable or disable a specific schedule
     */
    async podsDeviceIdSchedulesScheduleIdPut(requestParameters: PodsDeviceIdSchedulesScheduleIdPutRequest): Promise<void> {
        await this.podsDeviceIdSchedulesScheduleIdPutRaw(requestParameters);
    }

    /**
     * Get the Climate React settings
     */
    async podsDeviceIdSmartmodeGetRaw(requestParameters: PodsDeviceIdSmartmodeGetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling podsDeviceIdSmartmodeGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // api_key authentication
        }

        const response = await this.request({
            path: `/pods/{device_id}/smartmode`.replace(`{${"device_id"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get the Climate React settings
     */
    async podsDeviceIdSmartmodeGet(requestParameters: PodsDeviceIdSmartmodeGetRequest): Promise<void> {
        await this.podsDeviceIdSmartmodeGetRaw(requestParameters);
    }

    /**
     * enable or disable Climate React
     */
    async podsDeviceIdSmartmodePutRaw(requestParameters: PodsDeviceIdSmartmodePutRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling podsDeviceIdSmartmodePut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // api_key authentication
        }

        const response = await this.request({
            path: `/pods/{device_id}/smartmode`.replace(`{${"device_id"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UNKNOWN_BASE_TYPEToJSON(requestParameters.UNKNOWN_BASE_TYPE),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * enable or disable Climate React
     */
    async podsDeviceIdSmartmodePut(requestParameters: PodsDeviceIdSmartmodePutRequest): Promise<void> {
        await this.podsDeviceIdSmartmodePutRaw(requestParameters);
    }

    /**
     * delete a timer
     */
    async podsDeviceIdTimerDeleteRaw(requestParameters: PodsDeviceIdTimerDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling podsDeviceIdTimerDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pods/{device_id}/timer/`.replace(`{${"device_id"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * delete a timer
     */
    async podsDeviceIdTimerDelete(requestParameters: PodsDeviceIdTimerDeleteRequest): Promise<void> {
        await this.podsDeviceIdTimerDeleteRaw(requestParameters);
    }

    /**
     * Get the current timer
     */
    async podsDeviceIdTimerGetRaw(requestParameters: PodsDeviceIdTimerGetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling podsDeviceIdTimerGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // api_key authentication
        }

        const response = await this.request({
            path: `/pods/{device_id}/timer/`.replace(`{${"device_id"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get the current timer
     */
    async podsDeviceIdTimerGet(requestParameters: PodsDeviceIdTimerGetRequest): Promise<void> {
        await this.podsDeviceIdTimerGetRaw(requestParameters);
    }

    /**
     * set a timer
     */
    async podsDeviceIdTimerPutRaw(requestParameters: PodsDeviceIdTimerPutRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
            throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling podsDeviceIdTimerPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // api_key authentication
        }

        const response = await this.request({
            path: `/pods/{device_id}/timer/`.replace(`{${"device_id"}}`, encodeURIComponent(String(requestParameters.deviceId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TimerObjectToJSON(requestParameters.timerObject),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * set a timer
     */
    async podsDeviceIdTimerPut(requestParameters: PodsDeviceIdTimerPutRequest): Promise<void> {
        await this.podsDeviceIdTimerPutRaw(requestParameters);
    }

    /**
     * Get all devices
     */
    async usersMePodsGetRaw(requestParameters: UsersMePodsGetRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.fields !== undefined) {
            queryParameters['fields'] = requestParameters.fields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["apiKey"] = this.configuration.apiKey("apiKey"); // api_key authentication
        }

        const response = await this.request({
            path: `/users/me/pods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all devices
     */
    async usersMePodsGet(requestParameters: UsersMePodsGetRequest): Promise<void> {
        await this.usersMePodsGetRaw(requestParameters);
    }

}
